// Generated by CoffeeScript 1.3.3
(function() {
  var HTMLSafeString, ThermosContext, config, doctypes, elements, escapeHTML, normalizeUrl, options, render, tags, thermos, type, typeOf,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  thermos = {};

  thermos.version = '0.1.0';

  typeOf = function(obj) {
    return Object.prototype.toString.call(obj).slice(8, -1);
  };

  config = {
    ROOT_JS_URL: '/javascripts/',
    ROOT_CSS_URL: "/stylesheets/"
  };

  thermos.configure = function(opts) {
    var func, name, _ref, _ref1, _results;
    if ((_ref = config.helpers) == null) {
      config.helpers = {};
    }
    _ref1 = opts.helpers;
    _results = [];
    for (name in _ref1) {
      func = _ref1[name];
      _results.push(config.helpers[name] = func);
    }
    return _results;
  };

  thermos.resetConfig = function(opts) {
    return config = {};
  };

  thermos.options = options = {
    DEFAULT_DOCTYPE: 5
  };

  elements = {
    regular: 'a abbr address article aside audio b bdi bdo blockquote body\nbutton canvas caption cite code colgroup datalist dd del details dfn div dl\ndt em fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header\nhgroup html i iframe ins kbd label legend li map mark menu meter nav\nnoscript object ol optgroup option output p pre progress q rp rt ruby s\nsamp script section select small span strong style sub summary sup table\ntbody td textarea tfoot th thead time title tr u ul var video',
    "void": 'area base br col command embed hr img input keygen link meta\nparam source track wbr'
  };

  for (type in elements) {
    tags = elements[type];
    elements[type] = tags.split(/\s+/);
  }

  doctypes = {
    '5': '<!DOCTYPE html>',
    'xml': '<?xml version="1.0" encoding="utf-8" ?>',
    'transitional': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
    'strict': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
    'frameset': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
    '1.1': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">',
    'basic': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">',
    'mobile': '<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">',
    'ce': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "ce-html-1.0-transitional.dtd">'
  };

  normalizeUrl = function(root, url, ext) {
    url = url.substr(-ext.length) !== ext ? url + ext : url;
    if (url[0] === '/' || /^[-a-z]+:\/\//.test(url)) {
      return url;
    } else {
      return root + url;
    }
  };

  escapeHTML = function(str) {
    return String(str).replace(/&(?!\w+;|#\d+;|#x[\da-f]+;)/gi, '&amp;').replace(/</g, '&gt;').replace(/>/g, '&lt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;').replace(/â€”/g, '&mdash;');
  };

  ThermosContext = (function() {
    var element, _fn, _i, _len, _ref,
      _this = this;

    function ThermosContext(opts, template) {
      var func, name, _ref, _ref1;
      if (opts == null) {
        opts = {};
      }
      this.buffer = [];
      this.template = template;
      this.locals = opts.locals || {};
      _ref = config.helpers || {};
      for (name in _ref) {
        func = _ref[name];
        this[name] = func;
      }
      _ref1 = opts.helpers || {};
      for (name in _ref1) {
        func = _ref1[name];
        this[name] = func;
      }
    }

    _ref = elements.regular.concat(elements["void"]);
    _fn = function(element) {
      return ThermosContext.prototype[element] = function() {
        return this.tag.apply(this, [element].concat(__slice.call(arguments)));
      };
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      _fn(element);
    }

    ThermosContext.prototype.render = function() {
      this.template.call(this, this.locals);
      return this.buffer.join('');
    };

    ThermosContext.prototype.doctype = function(version) {
      if (version == null) {
        version = options.DEFAULT_DOCTYPE;
      }
      return this.buffer.push(doctypes[String(version)]);
    };

    ThermosContext.prototype.text = function(txt) {
      return this.buffer.push(String(txt));
    };

    ThermosContext.prototype.js = function(url) {
      url = normalizeUrl(config.ROOT_JS_URL, url, '.js');
      return this.script({
        type: "text/javascript",
        src: url
      });
    };

    ThermosContext.prototype.css = function(url) {
      url = normalizeUrl(config.ROOT_CSS_URL, url, '.css');
      return this.link({
        type: "text/css",
        rel: "stylesheet",
        media: "screen",
        href: url
      });
    };

    ThermosContext.prototype.script = function(callback) {
      var string;
      if (typeOf(callback) === 'Function') {
        string = "(" + (callback.toString()) + ").call(this);";
        return this.tag('script', this.html_safe(string));
      } else {
        return this.tag.apply(this, ['script'].concat(__slice.call(arguments)));
      }
    };

    ThermosContext.prototype.link_to = function() {
      var args, attrs, func, text, url;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (typeOf(args[args.length - 1]) === 'Function') {
        url = args.shift();
        func = args.pop();
        attrs = args.pop();
        return this.a({
          href: url
        }, attrs, func);
      } else {
        text = args[0];
        url = args[1] || text;
        attrs = args[2];
        return this.a({
          href: url
        }, text, attrs);
      }
    };

    ThermosContext.prototype.tag = function() {
      var arg, args, attrs, classRegex, data, func, groups, i, key, returned, tagName, text, val, value, _j, _len1;
      tagName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      attrs = {};
      for (i = _j = 0, _len1 = args.length; _j < _len1; i = ++_j) {
        arg = args[i];
        switch (typeOf(arg)) {
          case 'Function':
            func = arg;
            break;
          case 'String':
            if (i === 0 && /^([#.][a-z_-][\w-]*)+$/i.test(arg)) {
              classRegex = /\.([^#.]+)/g;
              if (groups = /#([^#.]+)/.exec(arg)) {
                attrs.id = groups.pop();
              }
              while (groups = classRegex.exec(arg)) {
                (attrs["class"] || (attrs["class"] = [])).push(groups[1]);
              }
              attrs["class"] && (attrs["class"] = attrs["class"].join(' '));
            } else {
              text = escapeHTML(arg);
            }
            break;
          case 'Object':
            if (arg instanceof HTMLSafeString) {
              text = arg.str;
            } else {
              for (key in arg) {
                value = arg[key];
                attrs[key] = value;
              }
            }
        }
      }
      if (data = attrs.data) {
        delete attrs.data;
        for (key in data) {
          val = data[key];
          key = key.replace(/_/g, '-');
          attrs["data-" + key] = val;
        }
      }
      attrs = ((function() {
        var _results;
        _results = [];
        for (key in attrs) {
          value = attrs[key];
          _results.push(" " + key + "=\"" + value + "\"");
        }
        return _results;
      })()).join('');
      if (__indexOf.call(elements["void"], tagName) >= 0) {
        this.text("<" + tagName + attrs + "/>");
      } else {
        this.text("<" + tagName + attrs + ">");
        if (func != null) {
          returned = func.call(this, this.locals);
          if (typeOf(returned) === "String") {
            this.text(returned);
          }
        }
        this.text;
        if (text != null) {
          this.text(String(text));
        }
        this.text("</" + tagName + ">");
      }
      return this;
    };

    ThermosContext.prototype.html_safe = function(str) {
      return new HTMLSafeString(str);
    };

    ThermosContext.prototype.toString = function() {
      return "";
    };

    return ThermosContext;

  }).call(this);

  HTMLSafeString = (function() {

    function HTMLSafeString(str) {
      this.str = str;
    }

    return HTMLSafeString;

  })();

  thermos.render = render = function(opts, template) {
    var cc;
    if (opts == null) {
      opts = {};
    }
    if (arguments.length === 1) {
      template = opts;
      opts = {};
    }
    cc = new ThermosContext(opts, template);
    return cc.render();
  };

  thermos.template = function(template) {
    return function(locals) {
      return render({
        locals: locals
      }, template);
    };
  };

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = thermos;
  } else {
    this.thermos = thermos;
  }

}).call(this);
